# MarkLogic-Node Generator

This application was generated by the MarkLogic-Node [Slush](https://github.com/klei/slush) generator, with the following components:

- [AngularJS](https://angularjs.org/)
- [Gulp](http://gulpjs.com/)
- [node.js](http://nodejs.org/): very thin layer, hosting the Angular code and proxying MarkLogic REST API requests
- [Roxy Deployer](https://github.com/marklogic/roxy): bootstrap MarkLogic databases, application servers, etc; scaffolding for MarkLogic REST API service extensions

## Install Required Dependencies

- [node.js](http://nodejs.org/download/)
- [npm](https://www.npmjs.com/): Built-in package manager for node (comes with
  node, but check to be sure you have latest version: `npm install -g npm`)
- [gulp](http://gulpjs.com/): Javascript task automation (`npm install -g
  gulp`)
- [Bower](http://bower.io/): A package manager for front-end libraries (`npm
  install -g bower`)
- [Git](https://git-scm.com/) - Roxy depends on this version control system
- [Ruby](https://www.ruby-lang.org/en/documentation/installation/) - Roxy
  depends on Ruby in order to run server configuration scripts

# Running the application

    ./ml local bootstrap
    ./ml local deploy modules

On Windows, that would be:

    ml.bat local bootstrap
    ml.bat local deploy modules

Install additional dependencies using the bower package manager:

    bower install

Edit `./local.json` to set your desired ports

    gulp serve-local # this will watch the .less file for changes, compile them to .css, and run the node server

# Installation and deployment on server

See etc/INSTALL.md

# Data

To do a one-time, manual update or initial insert of data, run 

    ./import-data.sh

This script will call other scripts that update data per data source.

Data used in this demo include RSS feeds from 2 sources (finanzen.net and handelsblatt), Twitter status updates from 4 sources (@Bankenverband, @ECB, @IIF, @bundesbank) and prices of stock listed in the Frankfurt stock market's DAX index.

Tasks defined in src/tasks take care of perioducally updated data from these data sources so the amaount of data in the database will grow over time.

# Adding new data sources

To add new rss data sources, take a look at files /src/lib/finanzen.xqy and /src/lib/hb.xqy and crate similar modules that import rss xml feeds. There might be slight difference between them, for instance they might be using different character encodings or missing some of the expected fields.

To add or change twitter accounts you want to follow, edit the file src/tasks/twitter-task.xqy for periodical updates. Also don't forget to change the same list in deploy/app_specific.rb, method load_tweets for one-time manual updates.
